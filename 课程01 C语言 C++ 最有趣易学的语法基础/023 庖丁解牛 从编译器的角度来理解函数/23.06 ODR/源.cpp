/*
单定义规则（One Definition Rule）：
	1、在任何翻译单元中，模板、类型、函数或对象只能有一个定义。其中一些可以有任意数量的声明。定义提供了一个实例。
	2、在整个程序中，对象或非内联函数不能有多个定义；如果使用一个对象或函数，它必须有一个定义。您可以声明一个从未使用过的对象或函数，在这种情况下，您不必提供定义。在任何情况下都不可能有多个定义。
	3、有些东西，像type，template，和extern inline函数，可以在一个以上的编译单元的定义。对于给定的实体，每个定义必须相同。在不同的编译单元，非外部对象和函数是不同的实体，即使他们的名字和类型相同。
*/

/*
名称的链接属性
	程序中的变量，函数，结构等都有着自己的名字，这些名字具
	有不同的连接属性，连接器就是根据这些连接属性来把各个对
	象文件连接起来；
	① 内部链接属性 该名称仅仅在本转换单元中有效
	② 外部链接属性 该名称在其他的转换单元中有效
	③ 无连接属性   该名称仅仅能用在该名称的作用域范围内
*/

#include<iostream>

using namespace std;

static int x = 255;

static void test()
{
	std::cout << "static test"<<std::endl;
}

inline int a = 255;
extern const int pt;
int x = 100;

int main()
{
	int a = 250;
	std::cout << pt;
	return 0;
}